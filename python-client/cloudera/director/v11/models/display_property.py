# coding: utf-8

"""
Licensed to Cloudera, Inc. under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  Cloudera, Inc. licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""


import pprint
import re  # noqa: F401

import six


class DisplayProperty(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_key': 'str',
        'name': 'str',
        'description': 'str',
        'sensitive': 'bool',
        'type': 'str',
        'widget': 'str',
        'backing_config_key': 'str'
    }

    attribute_map = {
        'display_key': 'displayKey',
        'name': 'name',
        'description': 'description',
        'sensitive': 'sensitive',
        'type': 'type',
        'widget': 'widget',
        'backing_config_key': 'backingConfigKey'
    }

    def __init__(self, display_key=None, name=None, description=None, sensitive=None, type=None, widget=None, backing_config_key=None):  # noqa: E501
        """DisplayProperty - a model defined in Swagger"""  # noqa: E501

        self._display_key = None
        self._name = None
        self._description = None
        self._sensitive = None
        self._type = None
        self._widget = None
        self._backing_config_key = None
        self.discriminator = None

        self.display_key = display_key
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if sensitive is not None:
            self.sensitive = sensitive
        if type is not None:
            self.type = type
        if widget is not None:
            self.widget = widget
        if backing_config_key is not None:
            self.backing_config_key = backing_config_key

    @property
    def display_key(self):
        """Gets the display_key of this DisplayProperty.  # noqa: E501

        Display property key  # noqa: E501

        :return: The display_key of this DisplayProperty.  # noqa: E501
        :rtype: str
        """
        return self._display_key

    @display_key.setter
    def display_key(self, display_key):
        """Sets the display_key of this DisplayProperty.

        Display property key  # noqa: E501

        :param display_key: The display_key of this DisplayProperty.  # noqa: E501
        :type: str
        """
        if display_key is None:
            raise ValueError("Invalid value for `display_key`, must not be `None`")  # noqa: E501

        self._display_key = display_key

    @property
    def name(self):
        """Gets the name of this DisplayProperty.  # noqa: E501

        Display property name  # noqa: E501

        :return: The name of this DisplayProperty.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DisplayProperty.

        Display property name  # noqa: E501

        :param name: The name of this DisplayProperty.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this DisplayProperty.  # noqa: E501

        Display property description  # noqa: E501

        :return: The description of this DisplayProperty.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DisplayProperty.

        Display property description  # noqa: E501

        :param description: The description of this DisplayProperty.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def sensitive(self):
        """Gets the sensitive of this DisplayProperty.  # noqa: E501

        Whether this property is sensitive  # noqa: E501

        :return: The sensitive of this DisplayProperty.  # noqa: E501
        :rtype: bool
        """
        return self._sensitive

    @sensitive.setter
    def sensitive(self, sensitive):
        """Sets the sensitive of this DisplayProperty.

        Whether this property is sensitive  # noqa: E501

        :param sensitive: The sensitive of this DisplayProperty.  # noqa: E501
        :type: bool
        """

        self._sensitive = sensitive

    @property
    def type(self):
        """Gets the type of this DisplayProperty.  # noqa: E501

        Display property type  # noqa: E501

        :return: The type of this DisplayProperty.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DisplayProperty.

        Display property type  # noqa: E501

        :param type: The type of this DisplayProperty.  # noqa: E501
        :type: str
        """
        allowed_values = ["BOOLEAN", "INTEGER", "DOUBLE", "STRING"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def widget(self):
        """Gets the widget of this DisplayProperty.  # noqa: E501

        Widget used to display this property  # noqa: E501

        :return: The widget of this DisplayProperty.  # noqa: E501
        :rtype: str
        """
        return self._widget

    @widget.setter
    def widget(self, widget):
        """Sets the widget of this DisplayProperty.

        Widget used to display this property  # noqa: E501

        :param widget: The widget of this DisplayProperty.  # noqa: E501
        :type: str
        """
        allowed_values = ["RADIO", "CHECKBOX", "TEXT", "PASSWORD", "NUMBER", "TEXTAREA", "FILE", "LIST", "OPENLIST", "MULTI", "OPENMULTI"]  # noqa: E501
        if widget not in allowed_values:
            raise ValueError(
                "Invalid value for `widget` ({0}), must be one of {1}"  # noqa: E501
                .format(widget, allowed_values)
            )

        self._widget = widget

    @property
    def backing_config_key(self):
        """Gets the backing_config_key of this DisplayProperty.  # noqa: E501

        Backing configuration property key  # noqa: E501

        :return: The backing_config_key of this DisplayProperty.  # noqa: E501
        :rtype: str
        """
        return self._backing_config_key

    @backing_config_key.setter
    def backing_config_key(self, backing_config_key):
        """Sets the backing_config_key of this DisplayProperty.

        Backing configuration property key  # noqa: E501

        :param backing_config_key: The backing_config_key of this DisplayProperty.  # noqa: E501
        :type: str
        """

        self._backing_config_key = backing_config_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DisplayProperty):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
