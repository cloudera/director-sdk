# coding: utf-8

"""
Licensed to Cloudera, Inc. under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  Cloudera, Inc. licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cloudera.director.common.client import ApiClient


class ClustersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def collect_diagnostic_data(self, environment, deployment, cluster, **kwargs):  # noqa: E501
        """Collects diagnostic data  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.collect_diagnostic_data(environment, deployment, cluster, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :param str cluster: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.collect_diagnostic_data_with_http_info(environment, deployment, cluster, **kwargs)  # noqa: E501
        else:
            (data) = self.collect_diagnostic_data_with_http_info(environment, deployment, cluster, **kwargs)  # noqa: E501
            return data

    def collect_diagnostic_data_with_http_info(self, environment, deployment, cluster, **kwargs):  # noqa: E501
        """Collects diagnostic data  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.collect_diagnostic_data_with_http_info(environment, deployment, cluster, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :param str cluster: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['environment', 'deployment', 'cluster']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collect_diagnostic_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `collect_diagnostic_data`")  # noqa: E501
        # verify the required parameter 'deployment' is set
        if ('deployment' not in params or
                params['deployment'] is None):
            raise ValueError("Missing the required parameter `deployment` when calling `collect_diagnostic_data`")  # noqa: E501
        # verify the required parameter 'cluster' is set
        if ('cluster' not in params or
                params['cluster'] is None):
            raise ValueError("Missing the required parameter `cluster` when calling `collect_diagnostic_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501
        if 'deployment' in params:
            path_params['deployment'] = params['deployment']  # noqa: E501
        if 'cluster' in params:
            path_params['cluster'] = params['cluster']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/d6.0/environments/{environment}/deployments/{deployment}/clusters/{cluster}/diagnosticData', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            model_package="cloudera.director.d6_0.models",
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create(self, environment, deployment, cluster_template, **kwargs):  # noqa: E501
        """Create a new cluster  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create(environment, deployment, cluster_template, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :param ClusterTemplate cluster_template: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_with_http_info(environment, deployment, cluster_template, **kwargs)  # noqa: E501
        else:
            (data) = self.create_with_http_info(environment, deployment, cluster_template, **kwargs)  # noqa: E501
            return data

    def create_with_http_info(self, environment, deployment, cluster_template, **kwargs):  # noqa: E501
        """Create a new cluster  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_with_http_info(environment, deployment, cluster_template, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :param ClusterTemplate cluster_template: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['environment', 'deployment', 'cluster_template']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `create`")  # noqa: E501
        # verify the required parameter 'deployment' is set
        if ('deployment' not in params or
                params['deployment'] is None):
            raise ValueError("Missing the required parameter `deployment` when calling `create`")  # noqa: E501
        # verify the required parameter 'cluster_template' is set
        if ('cluster_template' not in params or
                params['cluster_template'] is None):
            raise ValueError("Missing the required parameter `cluster_template` when calling `create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501
        if 'deployment' in params:
            path_params['deployment'] = params['deployment']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cluster_template' in params:
            body_params = params['cluster_template']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/d6.0/environments/{environment}/deployments/{deployment}/clusters', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            model_package="cloudera.director.d6_0.models",
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete(self, environment, deployment, cluster, **kwargs):  # noqa: E501
        """Delete a cluster by name  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete(environment, deployment, cluster, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :param str cluster: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_with_http_info(environment, deployment, cluster, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_with_http_info(environment, deployment, cluster, **kwargs)  # noqa: E501
            return data

    def delete_with_http_info(self, environment, deployment, cluster, **kwargs):  # noqa: E501
        """Delete a cluster by name  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_with_http_info(environment, deployment, cluster, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :param str cluster: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['environment', 'deployment', 'cluster']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `delete`")  # noqa: E501
        # verify the required parameter 'deployment' is set
        if ('deployment' not in params or
                params['deployment'] is None):
            raise ValueError("Missing the required parameter `deployment` when calling `delete`")  # noqa: E501
        # verify the required parameter 'cluster' is set
        if ('cluster' not in params or
                params['cluster'] is None):
            raise ValueError("Missing the required parameter `cluster` when calling `delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501
        if 'deployment' in params:
            path_params['deployment'] = params['deployment']  # noqa: E501
        if 'cluster' in params:
            path_params['cluster'] = params['cluster']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/d6.0/environments/{environment}/deployments/{deployment}/clusters/{cluster}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            model_package="cloudera.director.d6_0.models",
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_cluster_configuration(self, environment, deployment, cluster, **kwargs):  # noqa: E501
        """Exports the cluster configuration for this cluster  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.export_cluster_configuration(environment, deployment, cluster, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :param str cluster: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.export_cluster_configuration_with_http_info(environment, deployment, cluster, **kwargs)  # noqa: E501
        else:
            (data) = self.export_cluster_configuration_with_http_info(environment, deployment, cluster, **kwargs)  # noqa: E501
            return data

    def export_cluster_configuration_with_http_info(self, environment, deployment, cluster, **kwargs):  # noqa: E501
        """Exports the cluster configuration for this cluster  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.export_cluster_configuration_with_http_info(environment, deployment, cluster, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :param str cluster: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['environment', 'deployment', 'cluster']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_cluster_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `export_cluster_configuration`")  # noqa: E501
        # verify the required parameter 'deployment' is set
        if ('deployment' not in params or
                params['deployment'] is None):
            raise ValueError("Missing the required parameter `deployment` when calling `export_cluster_configuration`")  # noqa: E501
        # verify the required parameter 'cluster' is set
        if ('cluster' not in params or
                params['cluster'] is None):
            raise ValueError("Missing the required parameter `cluster` when calling `export_cluster_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501
        if 'deployment' in params:
            path_params['deployment'] = params['deployment']  # noqa: E501
        if 'cluster' in params:
            path_params['cluster'] = params['cluster']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hocon'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/d6.0/environments/{environment}/deployments/{deployment}/clusters/{cluster}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            model_package="cloudera.director.d6_0.models",
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_administration_settings(self, environment, deployment, cluster, **kwargs):  # noqa: E501
        """Get administration settings for a cluster  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_administration_settings(environment, deployment, cluster, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :param str cluster: (required)
        :return: ClusterAdministrationSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_administration_settings_with_http_info(environment, deployment, cluster, **kwargs)  # noqa: E501
        else:
            (data) = self.get_administration_settings_with_http_info(environment, deployment, cluster, **kwargs)  # noqa: E501
            return data

    def get_administration_settings_with_http_info(self, environment, deployment, cluster, **kwargs):  # noqa: E501
        """Get administration settings for a cluster  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_administration_settings_with_http_info(environment, deployment, cluster, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :param str cluster: (required)
        :return: ClusterAdministrationSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['environment', 'deployment', 'cluster']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_administration_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `get_administration_settings`")  # noqa: E501
        # verify the required parameter 'deployment' is set
        if ('deployment' not in params or
                params['deployment'] is None):
            raise ValueError("Missing the required parameter `deployment` when calling `get_administration_settings`")  # noqa: E501
        # verify the required parameter 'cluster' is set
        if ('cluster' not in params or
                params['cluster'] is None):
            raise ValueError("Missing the required parameter `cluster` when calling `get_administration_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501
        if 'deployment' in params:
            path_params['deployment'] = params['deployment']  # noqa: E501
        if 'cluster' in params:
            path_params['cluster'] = params['cluster']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/d6.0/environments/{environment}/deployments/{deployment}/clusters/{cluster}/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterAdministrationSettings',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            model_package="cloudera.director.d6_0.models",
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_history(self, environment, deployment, cluster, **kwargs):  # noqa: E501
        """Get history of updates for a cluster  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_history(environment, deployment, cluster, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :param str cluster: (required)
        :param int num_events:
        :param int page:
        :return: list[ClusterUpdateEventSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_history_with_http_info(environment, deployment, cluster, **kwargs)  # noqa: E501
        else:
            (data) = self.get_history_with_http_info(environment, deployment, cluster, **kwargs)  # noqa: E501
            return data

    def get_history_with_http_info(self, environment, deployment, cluster, **kwargs):  # noqa: E501
        """Get history of updates for a cluster  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_history_with_http_info(environment, deployment, cluster, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :param str cluster: (required)
        :param int num_events:
        :param int page:
        :return: list[ClusterUpdateEventSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['environment', 'deployment', 'cluster', 'num_events', 'page']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `get_history`")  # noqa: E501
        # verify the required parameter 'deployment' is set
        if ('deployment' not in params or
                params['deployment'] is None):
            raise ValueError("Missing the required parameter `deployment` when calling `get_history`")  # noqa: E501
        # verify the required parameter 'cluster' is set
        if ('cluster' not in params or
                params['cluster'] is None):
            raise ValueError("Missing the required parameter `cluster` when calling `get_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501
        if 'deployment' in params:
            path_params['deployment'] = params['deployment']  # noqa: E501
        if 'cluster' in params:
            path_params['cluster'] = params['cluster']  # noqa: E501

        query_params = []
        if 'num_events' in params:
            query_params.append(('numEvents', params['num_events']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/d6.0/environments/{environment}/deployments/{deployment}/clusters/{cluster}/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClusterUpdateEventSummary]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            model_package="cloudera.director.d6_0.models",
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metrics(self, environment, deployment, cluster, **kwargs):  # noqa: E501
        """Get cluster metrics by name  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metrics(environment, deployment, cluster, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :param str cluster: (required)
        :return: Metrics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_metrics_with_http_info(environment, deployment, cluster, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metrics_with_http_info(environment, deployment, cluster, **kwargs)  # noqa: E501
            return data

    def get_metrics_with_http_info(self, environment, deployment, cluster, **kwargs):  # noqa: E501
        """Get cluster metrics by name  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metrics_with_http_info(environment, deployment, cluster, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :param str cluster: (required)
        :return: Metrics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['environment', 'deployment', 'cluster']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `get_metrics`")  # noqa: E501
        # verify the required parameter 'deployment' is set
        if ('deployment' not in params or
                params['deployment'] is None):
            raise ValueError("Missing the required parameter `deployment` when calling `get_metrics`")  # noqa: E501
        # verify the required parameter 'cluster' is set
        if ('cluster' not in params or
                params['cluster'] is None):
            raise ValueError("Missing the required parameter `cluster` when calling `get_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501
        if 'deployment' in params:
            path_params['deployment'] = params['deployment']  # noqa: E501
        if 'cluster' in params:
            path_params['cluster'] = params['cluster']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/d6.0/environments/{environment}/deployments/{deployment}/clusters/{cluster}/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Metrics',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            model_package="cloudera.director.d6_0.models",
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_redacted(self, environment, deployment, cluster, **kwargs):  # noqa: E501
        """Get a cluster by name  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_redacted(environment, deployment, cluster, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :param str cluster: (required)
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_redacted_with_http_info(environment, deployment, cluster, **kwargs)  # noqa: E501
        else:
            (data) = self.get_redacted_with_http_info(environment, deployment, cluster, **kwargs)  # noqa: E501
            return data

    def get_redacted_with_http_info(self, environment, deployment, cluster, **kwargs):  # noqa: E501
        """Get a cluster by name  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_redacted_with_http_info(environment, deployment, cluster, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :param str cluster: (required)
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['environment', 'deployment', 'cluster']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_redacted" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `get_redacted`")  # noqa: E501
        # verify the required parameter 'deployment' is set
        if ('deployment' not in params or
                params['deployment'] is None):
            raise ValueError("Missing the required parameter `deployment` when calling `get_redacted`")  # noqa: E501
        # verify the required parameter 'cluster' is set
        if ('cluster' not in params or
                params['cluster'] is None):
            raise ValueError("Missing the required parameter `cluster` when calling `get_redacted`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501
        if 'deployment' in params:
            path_params['deployment'] = params['deployment']  # noqa: E501
        if 'cluster' in params:
            path_params['cluster'] = params['cluster']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/d6.0/environments/{environment}/deployments/{deployment}/clusters/{cluster}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Cluster',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            model_package="cloudera.director.d6_0.models",
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_status(self, environment, deployment, cluster, **kwargs):  # noqa: E501
        """Get a cluster status by name  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_status(environment, deployment, cluster, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :param str cluster: (required)
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_status_with_http_info(environment, deployment, cluster, **kwargs)  # noqa: E501
        else:
            (data) = self.get_status_with_http_info(environment, deployment, cluster, **kwargs)  # noqa: E501
            return data

    def get_status_with_http_info(self, environment, deployment, cluster, **kwargs):  # noqa: E501
        """Get a cluster status by name  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_status_with_http_info(environment, deployment, cluster, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :param str cluster: (required)
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['environment', 'deployment', 'cluster']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `get_status`")  # noqa: E501
        # verify the required parameter 'deployment' is set
        if ('deployment' not in params or
                params['deployment'] is None):
            raise ValueError("Missing the required parameter `deployment` when calling `get_status`")  # noqa: E501
        # verify the required parameter 'cluster' is set
        if ('cluster' not in params or
                params['cluster'] is None):
            raise ValueError("Missing the required parameter `cluster` when calling `get_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501
        if 'deployment' in params:
            path_params['deployment'] = params['deployment']  # noqa: E501
        if 'cluster' in params:
            path_params['cluster'] = params['cluster']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/d6.0/environments/{environment}/deployments/{deployment}/clusters/{cluster}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Status',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            model_package="cloudera.director.d6_0.models",
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_redacted(self, environment, deployment, cluster, **kwargs):  # noqa: E501
        """Get a cluster template by name  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_template_redacted(environment, deployment, cluster, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :param str cluster: (required)
        :return: ClusterTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_template_redacted_with_http_info(environment, deployment, cluster, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_redacted_with_http_info(environment, deployment, cluster, **kwargs)  # noqa: E501
            return data

    def get_template_redacted_with_http_info(self, environment, deployment, cluster, **kwargs):  # noqa: E501
        """Get a cluster template by name  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_template_redacted_with_http_info(environment, deployment, cluster, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :param str cluster: (required)
        :return: ClusterTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['environment', 'deployment', 'cluster']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_redacted" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `get_template_redacted`")  # noqa: E501
        # verify the required parameter 'deployment' is set
        if ('deployment' not in params or
                params['deployment'] is None):
            raise ValueError("Missing the required parameter `deployment` when calling `get_template_redacted`")  # noqa: E501
        # verify the required parameter 'cluster' is set
        if ('cluster' not in params or
                params['cluster'] is None):
            raise ValueError("Missing the required parameter `cluster` when calling `get_template_redacted`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501
        if 'deployment' in params:
            path_params['deployment'] = params['deployment']  # noqa: E501
        if 'cluster' in params:
            path_params['cluster'] = params['cluster']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/d6.0/environments/{environment}/deployments/{deployment}/clusters/{cluster}/template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            model_package="cloudera.director.d6_0.models",
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list(self, environment, deployment, **kwargs):  # noqa: E501
        """List all clusters  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list(environment, deployment, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_with_http_info(environment, deployment, **kwargs)  # noqa: E501
        else:
            (data) = self.list_with_http_info(environment, deployment, **kwargs)  # noqa: E501
            return data

    def list_with_http_info(self, environment, deployment, **kwargs):  # noqa: E501
        """List all clusters  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_with_http_info(environment, deployment, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['environment', 'deployment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `list`")  # noqa: E501
        # verify the required parameter 'deployment' is set
        if ('deployment' not in params or
                params['deployment'] is None):
            raise ValueError("Missing the required parameter `deployment` when calling `list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501
        if 'deployment' in params:
            path_params['deployment'] = params['deployment']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/d6.0/environments/{environment}/deployments/{deployment}/clusters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            model_package="cloudera.director.d6_0.models",
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update(self, environment, deployment, cluster, desired, **kwargs):  # noqa: E501
        """Update an existing cluster  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update(environment, deployment, cluster, desired, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :param str cluster: (required)
        :param ClusterTemplate desired: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_with_http_info(environment, deployment, cluster, desired, **kwargs)  # noqa: E501
        else:
            (data) = self.update_with_http_info(environment, deployment, cluster, desired, **kwargs)  # noqa: E501
            return data

    def update_with_http_info(self, environment, deployment, cluster, desired, **kwargs):  # noqa: E501
        """Update an existing cluster  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_with_http_info(environment, deployment, cluster, desired, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :param str cluster: (required)
        :param ClusterTemplate desired: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['environment', 'deployment', 'cluster', 'desired']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `update`")  # noqa: E501
        # verify the required parameter 'deployment' is set
        if ('deployment' not in params or
                params['deployment'] is None):
            raise ValueError("Missing the required parameter `deployment` when calling `update`")  # noqa: E501
        # verify the required parameter 'cluster' is set
        if ('cluster' not in params or
                params['cluster'] is None):
            raise ValueError("Missing the required parameter `cluster` when calling `update`")  # noqa: E501
        # verify the required parameter 'desired' is set
        if ('desired' not in params or
                params['desired'] is None):
            raise ValueError("Missing the required parameter `desired` when calling `update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501
        if 'deployment' in params:
            path_params['deployment'] = params['deployment']  # noqa: E501
        if 'cluster' in params:
            path_params['cluster'] = params['cluster']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'desired' in params:
            body_params = params['desired']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/d6.0/environments/{environment}/deployments/{deployment}/clusters/{cluster}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            model_package="cloudera.director.d6_0.models",
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_administration_settings(self, environment, deployment, cluster, administration_settings, **kwargs):  # noqa: E501
        """Update administration settings for a cluster  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_administration_settings(environment, deployment, cluster, administration_settings, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :param str cluster: (required)
        :param ClusterAdministrationSettings administration_settings: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_administration_settings_with_http_info(environment, deployment, cluster, administration_settings, **kwargs)  # noqa: E501
        else:
            (data) = self.update_administration_settings_with_http_info(environment, deployment, cluster, administration_settings, **kwargs)  # noqa: E501
            return data

    def update_administration_settings_with_http_info(self, environment, deployment, cluster, administration_settings, **kwargs):  # noqa: E501
        """Update administration settings for a cluster  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_administration_settings_with_http_info(environment, deployment, cluster, administration_settings, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment: (required)
        :param str deployment: (required)
        :param str cluster: (required)
        :param ClusterAdministrationSettings administration_settings: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['environment', 'deployment', 'cluster', 'administration_settings']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_administration_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'environment' is set
        if ('environment' not in params or
                params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `update_administration_settings`")  # noqa: E501
        # verify the required parameter 'deployment' is set
        if ('deployment' not in params or
                params['deployment'] is None):
            raise ValueError("Missing the required parameter `deployment` when calling `update_administration_settings`")  # noqa: E501
        # verify the required parameter 'cluster' is set
        if ('cluster' not in params or
                params['cluster'] is None):
            raise ValueError("Missing the required parameter `cluster` when calling `update_administration_settings`")  # noqa: E501
        # verify the required parameter 'administration_settings' is set
        if ('administration_settings' not in params or
                params['administration_settings'] is None):
            raise ValueError("Missing the required parameter `administration_settings` when calling `update_administration_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'environment' in params:
            path_params['environment'] = params['environment']  # noqa: E501
        if 'deployment' in params:
            path_params['deployment'] = params['deployment']  # noqa: E501
        if 'cluster' in params:
            path_params['cluster'] = params['cluster']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'administration_settings' in params:
            body_params = params['administration_settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/d6.0/environments/{environment}/deployments/{deployment}/clusters/{cluster}/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            model_package="cloudera.director.d6_0.models",
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
