# coding: utf-8

"""
Licensed to Cloudera, Inc. under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  Cloudera, Inc. licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""


import pprint
import re  # noqa: F401

import six


class TimeSeriesRow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_name': 'str',
        'metric_name': 'str',
        'timestamp': 'datetime',
        'value': 'float'
    }

    attribute_map = {
        'entity_name': 'entityName',
        'metric_name': 'metricName',
        'timestamp': 'timestamp',
        'value': 'value'
    }

    def __init__(self, entity_name=None, metric_name=None, timestamp=None, value=None):  # noqa: E501
        """TimeSeriesRow - a model defined in Swagger"""  # noqa: E501

        self._entity_name = None
        self._metric_name = None
        self._timestamp = None
        self._value = None
        self.discriminator = None

        self.entity_name = entity_name
        self.metric_name = metric_name
        self.timestamp = timestamp
        self.value = value

    @property
    def entity_name(self):
        """Gets the entity_name of this TimeSeriesRow.  # noqa: E501

        Entity name  # noqa: E501

        :return: The entity_name of this TimeSeriesRow.  # noqa: E501
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name):
        """Sets the entity_name of this TimeSeriesRow.

        Entity name  # noqa: E501

        :param entity_name: The entity_name of this TimeSeriesRow.  # noqa: E501
        :type: str
        """
        if entity_name is None:
            raise ValueError("Invalid value for `entity_name`, must not be `None`")  # noqa: E501

        self._entity_name = entity_name

    @property
    def metric_name(self):
        """Gets the metric_name of this TimeSeriesRow.  # noqa: E501

        Metric name  # noqa: E501

        :return: The metric_name of this TimeSeriesRow.  # noqa: E501
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this TimeSeriesRow.

        Metric name  # noqa: E501

        :param metric_name: The metric_name of this TimeSeriesRow.  # noqa: E501
        :type: str
        """
        if metric_name is None:
            raise ValueError("Invalid value for `metric_name`, must not be `None`")  # noqa: E501

        self._metric_name = metric_name

    @property
    def timestamp(self):
        """Gets the timestamp of this TimeSeriesRow.  # noqa: E501

        Timestamp  # noqa: E501

        :return: The timestamp of this TimeSeriesRow.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this TimeSeriesRow.

        Timestamp  # noqa: E501

        :param timestamp: The timestamp of this TimeSeriesRow.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def value(self):
        """Gets the value of this TimeSeriesRow.  # noqa: E501

        Value  # noqa: E501

        :return: The value of this TimeSeriesRow.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TimeSeriesRow.

        Value  # noqa: E501

        :param value: The value of this TimeSeriesRow.  # noqa: E501
        :type: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeSeriesRow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
