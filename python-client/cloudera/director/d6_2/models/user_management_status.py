# coding: utf-8

"""
Licensed to Cloudera, Inc. under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  Cloudera, Inc. licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""


import pprint
import re  # noqa: F401

import six


class UserManagementStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'local_user_management_enabled': 'bool',
        'user_source': 'str'
    }

    attribute_map = {
        'local_user_management_enabled': 'localUserManagementEnabled',
        'user_source': 'userSource'
    }

    def __init__(self, local_user_management_enabled=None, user_source=None):  # noqa: E501
        """UserManagementStatus - a model defined in Swagger"""  # noqa: E501

        self._local_user_management_enabled = None
        self._user_source = None
        self.discriminator = None

        self.local_user_management_enabled = local_user_management_enabled
        self.user_source = user_source

    @property
    def local_user_management_enabled(self):
        """Gets the local_user_management_enabled of this UserManagementStatus.  # noqa: E501

        Whether local user management is enabled  # noqa: E501

        :return: The local_user_management_enabled of this UserManagementStatus.  # noqa: E501
        :rtype: bool
        """
        return self._local_user_management_enabled

    @local_user_management_enabled.setter
    def local_user_management_enabled(self, local_user_management_enabled):
        """Sets the local_user_management_enabled of this UserManagementStatus.

        Whether local user management is enabled  # noqa: E501

        :param local_user_management_enabled: The local_user_management_enabled of this UserManagementStatus.  # noqa: E501
        :type: bool
        """
        if local_user_management_enabled is None:
            raise ValueError("Invalid value for `local_user_management_enabled`, must not be `None`")  # noqa: E501

        self._local_user_management_enabled = local_user_management_enabled

    @property
    def user_source(self):
        """Gets the user_source of this UserManagementStatus.  # noqa: E501

        User source  # noqa: E501

        :return: The user_source of this UserManagementStatus.  # noqa: E501
        :rtype: str
        """
        return self._user_source

    @user_source.setter
    def user_source(self, user_source):
        """Sets the user_source of this UserManagementStatus.

        User source  # noqa: E501

        :param user_source: The user_source of this UserManagementStatus.  # noqa: E501
        :type: str
        """
        if user_source is None:
            raise ValueError("Invalid value for `user_source`, must not be `None`")  # noqa: E501

        self._user_source = user_source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserManagementStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
