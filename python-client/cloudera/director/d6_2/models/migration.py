# coding: utf-8

"""
Licensed to Cloudera, Inc. under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  Cloudera, Inc. licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""


import pprint
import re  # noqa: F401

import six


class Migration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_group': 'MigratingGroup',
        'to_group': 'MigratingGroup'
    }

    attribute_map = {
        'from_group': 'fromGroup',
        'to_group': 'toGroup'
    }

    def __init__(self, from_group=None, to_group=None):  # noqa: E501
        """Migration - a model defined in Swagger"""  # noqa: E501

        self._from_group = None
        self._to_group = None
        self.discriminator = None

        self.from_group = from_group
        self.to_group = to_group

    @property
    def from_group(self):
        """Gets the from_group of this Migration.  # noqa: E501

        Description of virtual instances from which to migrate roles  # noqa: E501

        :return: The from_group of this Migration.  # noqa: E501
        :rtype: MigratingGroup
        """
        return self._from_group

    @from_group.setter
    def from_group(self, from_group):
        """Sets the from_group of this Migration.

        Description of virtual instances from which to migrate roles  # noqa: E501

        :param from_group: The from_group of this Migration.  # noqa: E501
        :type: MigratingGroup
        """
        if from_group is None:
            raise ValueError("Invalid value for `from_group`, must not be `None`")  # noqa: E501

        self._from_group = from_group

    @property
    def to_group(self):
        """Gets the to_group of this Migration.  # noqa: E501

        Description of virtual instances to which to migrate roles  # noqa: E501

        :return: The to_group of this Migration.  # noqa: E501
        :rtype: MigratingGroup
        """
        return self._to_group

    @to_group.setter
    def to_group(self, to_group):
        """Sets the to_group of this Migration.

        Description of virtual instances to which to migrate roles  # noqa: E501

        :param to_group: The to_group of this Migration.  # noqa: E501
        :type: MigratingGroup
        """
        if to_group is None:
            raise ValueError("Invalid value for `to_group`, must not be `None`")  # noqa: E501

        self._to_group = to_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Migration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
