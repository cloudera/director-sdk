# coding: utf-8

"""
Licensed to Cloudera, Inc. under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  Cloudera, Inc. licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""


import pprint
import re  # noqa: F401

import six


class Service(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_name': 'str',
        'url': 'str',
        'role_instances_url': 'str',
        'health': 'Health',
        'health_checks': 'list[HealthCheck]'
    }

    attribute_map = {
        'service_name': 'serviceName',
        'url': 'url',
        'role_instances_url': 'roleInstancesUrl',
        'health': 'health',
        'health_checks': 'healthChecks'
    }

    def __init__(self, service_name=None, url=None, role_instances_url=None, health=None, health_checks=None):  # noqa: E501
        """Service - a model defined in Swagger"""  # noqa: E501

        self._service_name = None
        self._url = None
        self._role_instances_url = None
        self._health = None
        self._health_checks = None
        self.discriminator = None

        self.service_name = service_name
        if url is not None:
            self.url = url
        if role_instances_url is not None:
            self.role_instances_url = role_instances_url
        if health is not None:
            self.health = health
        if health_checks is not None:
            self.health_checks = health_checks

    @property
    def service_name(self):
        """Gets the service_name of this Service.  # noqa: E501

        Service name  # noqa: E501

        :return: The service_name of this Service.  # noqa: E501
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this Service.

        Service name  # noqa: E501

        :param service_name: The service_name of this Service.  # noqa: E501
        :type: str
        """
        if service_name is None:
            raise ValueError("Invalid value for `service_name`, must not be `None`")  # noqa: E501

        self._service_name = service_name

    @property
    def url(self):
        """Gets the url of this Service.  # noqa: E501

        URL for service  # noqa: E501

        :return: The url of this Service.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Service.

        URL for service  # noqa: E501

        :param url: The url of this Service.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def role_instances_url(self):
        """Gets the role_instances_url of this Service.  # noqa: E501

        URL for service instances  # noqa: E501

        :return: The role_instances_url of this Service.  # noqa: E501
        :rtype: str
        """
        return self._role_instances_url

    @role_instances_url.setter
    def role_instances_url(self, role_instances_url):
        """Sets the role_instances_url of this Service.

        URL for service instances  # noqa: E501

        :param role_instances_url: The role_instances_url of this Service.  # noqa: E501
        :type: str
        """

        self._role_instances_url = role_instances_url

    @property
    def health(self):
        """Gets the health of this Service.  # noqa: E501

        Service health  # noqa: E501

        :return: The health of this Service.  # noqa: E501
        :rtype: Health
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this Service.

        Service health  # noqa: E501

        :param health: The health of this Service.  # noqa: E501
        :type: Health
        """

        self._health = health

    @property
    def health_checks(self):
        """Gets the health_checks of this Service.  # noqa: E501

        Health checks performed on service  # noqa: E501

        :return: The health_checks of this Service.  # noqa: E501
        :rtype: list[HealthCheck]
        """
        return self._health_checks

    @health_checks.setter
    def health_checks(self, health_checks):
        """Sets the health_checks of this Service.

        Health checks performed on service  # noqa: E501

        :param health_checks: The health_checks of this Service.  # noqa: E501
        :type: list[HealthCheck]
        """

        self._health_checks = health_checks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Service):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
