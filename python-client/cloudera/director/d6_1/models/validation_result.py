# coding: utf-8

"""
Licensed to Cloudera, Inc. under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  Cloudera, Inc. licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""


import pprint
import re  # noqa: F401

import six


class ValidationResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'errors': 'list[ErrorInfo]',
        'warnings': 'list[WarningInfo]',
        'format_warnings': 'list[WarningInfo]'
    }

    attribute_map = {
        'errors': 'errors',
        'warnings': 'warnings',
        'format_warnings': 'formatWarnings'
    }

    def __init__(self, errors=None, warnings=None, format_warnings=None):  # noqa: E501
        """ValidationResult - a model defined in Swagger"""  # noqa: E501

        self._errors = None
        self._warnings = None
        self._format_warnings = None
        self.discriminator = None

        if errors is not None:
            self.errors = errors
        if warnings is not None:
            self.warnings = warnings
        if format_warnings is not None:
            self.format_warnings = format_warnings

    @property
    def errors(self):
        """Gets the errors of this ValidationResult.  # noqa: E501

        Validation Errors  # noqa: E501

        :return: The errors of this ValidationResult.  # noqa: E501
        :rtype: list[ErrorInfo]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ValidationResult.

        Validation Errors  # noqa: E501

        :param errors: The errors of this ValidationResult.  # noqa: E501
        :type: list[ErrorInfo]
        """

        self._errors = errors

    @property
    def warnings(self):
        """Gets the warnings of this ValidationResult.  # noqa: E501

        Validation Warnings  # noqa: E501

        :return: The warnings of this ValidationResult.  # noqa: E501
        :rtype: list[WarningInfo]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this ValidationResult.

        Validation Warnings  # noqa: E501

        :param warnings: The warnings of this ValidationResult.  # noqa: E501
        :type: list[WarningInfo]
        """

        self._warnings = warnings

    @property
    def format_warnings(self):
        """Gets the format_warnings of this ValidationResult.  # noqa: E501

        Format Warnings  # noqa: E501

        :return: The format_warnings of this ValidationResult.  # noqa: E501
        :rtype: list[WarningInfo]
        """
        return self._format_warnings

    @format_warnings.setter
    def format_warnings(self, format_warnings):
        """Sets the format_warnings of this ValidationResult.

        Format Warnings  # noqa: E501

        :param format_warnings: The format_warnings of this ValidationResult.  # noqa: E501
        :type: list[WarningInfo]
        """

        self._format_warnings = format_warnings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidationResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
