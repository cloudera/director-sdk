# coding: utf-8

"""
Licensed to Cloudera, Inc. under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  Cloudera, Inc. licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""


import pprint
import re  # noqa: F401

import six


class ClusterUpdateEventSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'occurred_at': 'int',
        'services_added': 'list[str]',
        'services_removed': 'list[str]',
        'instances_added': 'int',
        'instances_removed': 'int',
        'instances_replaced': 'int'
    }

    attribute_map = {
        'occurred_at': 'occurredAt',
        'services_added': 'servicesAdded',
        'services_removed': 'servicesRemoved',
        'instances_added': 'instancesAdded',
        'instances_removed': 'instancesRemoved',
        'instances_replaced': 'instancesReplaced'
    }

    def __init__(self, occurred_at=None, services_added=None, services_removed=None, instances_added=None, instances_removed=None, instances_replaced=None):  # noqa: E501
        """ClusterUpdateEventSummary - a model defined in Swagger"""  # noqa: E501

        self._occurred_at = None
        self._services_added = None
        self._services_removed = None
        self._instances_added = None
        self._instances_removed = None
        self._instances_replaced = None
        self.discriminator = None

        self.occurred_at = occurred_at
        self.services_added = services_added
        self.services_removed = services_removed
        self.instances_added = instances_added
        self.instances_removed = instances_removed
        self.instances_replaced = instances_replaced

    @property
    def occurred_at(self):
        """Gets the occurred_at of this ClusterUpdateEventSummary.  # noqa: E501

        The time when this event occurred  # noqa: E501

        :return: The occurred_at of this ClusterUpdateEventSummary.  # noqa: E501
        :rtype: int
        """
        return self._occurred_at

    @occurred_at.setter
    def occurred_at(self, occurred_at):
        """Sets the occurred_at of this ClusterUpdateEventSummary.

        The time when this event occurred  # noqa: E501

        :param occurred_at: The occurred_at of this ClusterUpdateEventSummary.  # noqa: E501
        :type: int
        """
        if occurred_at is None:
            raise ValueError("Invalid value for `occurred_at`, must not be `None`")  # noqa: E501

        self._occurred_at = occurred_at

    @property
    def services_added(self):
        """Gets the services_added of this ClusterUpdateEventSummary.  # noqa: E501

        Services that were added  # noqa: E501

        :return: The services_added of this ClusterUpdateEventSummary.  # noqa: E501
        :rtype: list[str]
        """
        return self._services_added

    @services_added.setter
    def services_added(self, services_added):
        """Sets the services_added of this ClusterUpdateEventSummary.

        Services that were added  # noqa: E501

        :param services_added: The services_added of this ClusterUpdateEventSummary.  # noqa: E501
        :type: list[str]
        """
        if services_added is None:
            raise ValueError("Invalid value for `services_added`, must not be `None`")  # noqa: E501

        self._services_added = services_added

    @property
    def services_removed(self):
        """Gets the services_removed of this ClusterUpdateEventSummary.  # noqa: E501

        Services that were removed  # noqa: E501

        :return: The services_removed of this ClusterUpdateEventSummary.  # noqa: E501
        :rtype: list[str]
        """
        return self._services_removed

    @services_removed.setter
    def services_removed(self, services_removed):
        """Sets the services_removed of this ClusterUpdateEventSummary.

        Services that were removed  # noqa: E501

        :param services_removed: The services_removed of this ClusterUpdateEventSummary.  # noqa: E501
        :type: list[str]
        """
        if services_removed is None:
            raise ValueError("Invalid value for `services_removed`, must not be `None`")  # noqa: E501

        self._services_removed = services_removed

    @property
    def instances_added(self):
        """Gets the instances_added of this ClusterUpdateEventSummary.  # noqa: E501

        The number of instances added  # noqa: E501

        :return: The instances_added of this ClusterUpdateEventSummary.  # noqa: E501
        :rtype: int
        """
        return self._instances_added

    @instances_added.setter
    def instances_added(self, instances_added):
        """Sets the instances_added of this ClusterUpdateEventSummary.

        The number of instances added  # noqa: E501

        :param instances_added: The instances_added of this ClusterUpdateEventSummary.  # noqa: E501
        :type: int
        """
        if instances_added is None:
            raise ValueError("Invalid value for `instances_added`, must not be `None`")  # noqa: E501

        self._instances_added = instances_added

    @property
    def instances_removed(self):
        """Gets the instances_removed of this ClusterUpdateEventSummary.  # noqa: E501

        The number of instances removed  # noqa: E501

        :return: The instances_removed of this ClusterUpdateEventSummary.  # noqa: E501
        :rtype: int
        """
        return self._instances_removed

    @instances_removed.setter
    def instances_removed(self, instances_removed):
        """Sets the instances_removed of this ClusterUpdateEventSummary.

        The number of instances removed  # noqa: E501

        :param instances_removed: The instances_removed of this ClusterUpdateEventSummary.  # noqa: E501
        :type: int
        """
        if instances_removed is None:
            raise ValueError("Invalid value for `instances_removed`, must not be `None`")  # noqa: E501

        self._instances_removed = instances_removed

    @property
    def instances_replaced(self):
        """Gets the instances_replaced of this ClusterUpdateEventSummary.  # noqa: E501

        The number of instances replaced  # noqa: E501

        :return: The instances_replaced of this ClusterUpdateEventSummary.  # noqa: E501
        :rtype: int
        """
        return self._instances_replaced

    @instances_replaced.setter
    def instances_replaced(self, instances_replaced):
        """Sets the instances_replaced of this ClusterUpdateEventSummary.

        The number of instances replaced  # noqa: E501

        :param instances_replaced: The instances_replaced of this ClusterUpdateEventSummary.  # noqa: E501
        :type: int
        """
        if instances_replaced is None:
            raise ValueError("Invalid value for `instances_replaced`, must not be `None`")  # noqa: E501

        self._instances_replaced = instances_replaced

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterUpdateEventSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
