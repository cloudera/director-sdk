# coding: utf-8

"""
Licensed to Cloudera, Inc. under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  Cloudera, Inc. licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""


import pprint
import re  # noqa: F401

import six


class HealthCheck(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'check_name': 'str',
        'health_status': 'str',
        'explanation': 'str',
        'suppressed': 'bool'
    }

    attribute_map = {
        'check_name': 'checkName',
        'health_status': 'healthStatus',
        'explanation': 'explanation',
        'suppressed': 'suppressed'
    }

    def __init__(self, check_name=None, health_status=None, explanation=None, suppressed=None):  # noqa: E501
        """HealthCheck - a model defined in Swagger"""  # noqa: E501

        self._check_name = None
        self._health_status = None
        self._explanation = None
        self._suppressed = None
        self.discriminator = None

        self.check_name = check_name
        self.health_status = health_status
        if explanation is not None:
            self.explanation = explanation
        if suppressed is not None:
            self.suppressed = suppressed

    @property
    def check_name(self):
        """Gets the check_name of this HealthCheck.  # noqa: E501

        Health check name  # noqa: E501

        :return: The check_name of this HealthCheck.  # noqa: E501
        :rtype: str
        """
        return self._check_name

    @check_name.setter
    def check_name(self, check_name):
        """Sets the check_name of this HealthCheck.

        Health check name  # noqa: E501

        :param check_name: The check_name of this HealthCheck.  # noqa: E501
        :type: str
        """
        if check_name is None:
            raise ValueError("Invalid value for `check_name`, must not be `None`")  # noqa: E501

        self._check_name = check_name

    @property
    def health_status(self):
        """Gets the health_status of this HealthCheck.  # noqa: E501

        Health status value  # noqa: E501

        :return: The health_status of this HealthCheck.  # noqa: E501
        :rtype: str
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this HealthCheck.

        Health status value  # noqa: E501

        :param health_status: The health_status of this HealthCheck.  # noqa: E501
        :type: str
        """
        if health_status is None:
            raise ValueError("Invalid value for `health_status`, must not be `None`")  # noqa: E501
        allowed_values = ["DISABLED", "NOT_AVAILABLE", "STARTING", "STOPPING", "STOPPED", "GOOD", "CONCERNING", "BAD"]  # noqa: E501
        if health_status not in allowed_values:
            raise ValueError(
                "Invalid value for `health_status` ({0}), must be one of {1}"  # noqa: E501
                .format(health_status, allowed_values)
            )

        self._health_status = health_status

    @property
    def explanation(self):
        """Gets the explanation of this HealthCheck.  # noqa: E501

        Explanation for health status  # noqa: E501

        :return: The explanation of this HealthCheck.  # noqa: E501
        :rtype: str
        """
        return self._explanation

    @explanation.setter
    def explanation(self, explanation):
        """Sets the explanation of this HealthCheck.

        Explanation for health status  # noqa: E501

        :param explanation: The explanation of this HealthCheck.  # noqa: E501
        :type: str
        """

        self._explanation = explanation

    @property
    def suppressed(self):
        """Gets the suppressed of this HealthCheck.  # noqa: E501

        Check suppression flag  # noqa: E501

        :return: The suppressed of this HealthCheck.  # noqa: E501
        :rtype: bool
        """
        return self._suppressed

    @suppressed.setter
    def suppressed(self, suppressed):
        """Sets the suppressed of this HealthCheck.

        Check suppression flag  # noqa: E501

        :param suppressed: The suppressed of this HealthCheck.  # noqa: E501
        :type: bool
        """

        self._suppressed = suppressed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HealthCheck):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
